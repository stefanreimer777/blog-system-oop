<?php
#**************************************************************************************#

				
				/**
				*
				*	Ersetzt potentiell gef√§hrliche Zeichen (< > " ' &) eines √ºbergebenen Strings
				*	durch HTML-Entities und entfernt alle Whitespaces vor und nach dem String.
				*	Ersetzt einen √ºbergebenen Leerstring durch NULL
				*
				*	@param	String	$value		Der zu √ºbergebende String
				*
				*	@return	String					Der entsch√§rfte und bereinigte String
				*
				*/
				function cleanString( $value ) {
if(DEBUG_F)		echo "<p class='debugCleanString'>üåÄ <b>Line " . __LINE__ . "</b>: Aufruf " . __FUNCTION__ . "('$value') <i>(" . basename(__FILE__) . ")</i></p>\n";	
					
					/*
						SICHERHEIT: Damit so etwas nicht passiert: <script>alert("HACK!")</script>
						muss der empfangene String ZWINGEND entsch√§rft werden!
						htmlspecialchars() wandelt potentiell gef√§hrliche Steuerzeichen wie
						< > " & in HTML-Code um (&lt; &gt; &quot; &amp;)
						Der Parameter ENT_QUOTES wandelt zus√§tzlich einfache ' in &apos; um
						Der Parameter ENT_HTML5 sorgt daf√ºr, dass der generierte HTML-Code HTML5-konform ist
						Der 1. optionale Parameter regelt die zugrundeliegende Zeichencodierung 
						(NULL=Zeichencodierung wird vom Webserver √ºbernommen)
						Der 2. optionale Parameter regelt, ob bereits vorhandene HTML-Entities erneut entsch√§rft werden
						(false=keine doppelte Entsch√§rfung)
					*/
					$value = htmlspecialchars( $value, ENT_QUOTES | ENT_HTML5, NULL, false );
					
					// trim() entfernt vor und nach einem String s√§mtliche Whitespaces 
					// (Leerzeichen, Tabs, Zeilenumbr√ºche)
					$value = trim($value);
					
					// Damit cleanString() nicht NULL-Werte in Leerstings ver√§ndert, wird 
					// ein eventueller Leerstring in $value mit NULL √ºberschrieben 
					if( $value === '' ) {
						$value = NULL;
					}
					
					return $value;
				}
				

#**************************************************************************************#


				/**
				*
				*	Pr√ºft einen √ºbergebenen String auf Leerstring.
				*
				*	@param	String	$value		Der zu √ºbergebende String
				*
				*	@return	String|NULL				Fehlermeldung bei Leerstring | NULL
				*
				*/
				function checkMandatory($value) {
if(DEBUG_F)		echo "<p class='debugCheckMandatory'>üåÄ <b>Line " . __LINE__ . "</b>: Aufruf " . __FUNCTION__ . "('$value') <i>(" . basename(__FILE__) . ")</i></p>\n";	
					
					/* von PHP als false interpretiert werden: '', '0', NULL, 0, 0.0, false
						WICHTIG: Die Pr√ºfung auf Leerfeld muss zwingend den Datentyp Sting mitpr√ºfen,
						da ansonsten bei einer Eingabe '0' (z.B. Anzahl der im Haushalt lebenden Kinder: 0)
						die '0' als false und somit als leeres Feld gewertet wird!
					*/	
					if( $value === '' OR $value === NULL ) {  // $value === NULL muss erg√§nzt werden, wenn cleanString auf NULL-Werte umgestellt wird.
						// Fehlerfall					
						return 'Dies ist ein Pflichtfeld!';
						
					} else {
						// Erfolgsfall
						return NULL;
					}
				}	


#**************************************************************************************#

				
				/**
				*
				*	Pr√ºft einen √ºbergebenen String auf L√§nge und optional zus√§tzlich auf Leerstring
				*	Generiert Fehlermeldung bei Leerstring oder ung√ºltiger L√§nge
				*
				*	@param	String		$value									Der √ºbergebene String
				*	@param	Integer		$minLength=INPUT_MIN_LENGTH		Die zu pr√ºfende Mindestl√§nge
				*	@param	Integer		$maxLength=INPUT_MAX_LENGTH		Die zu pr√ºfende Maximall√§nge
				*
				*	@return	String|NULL												Fehlermeldung | ansonsten NULL
				*
				*/
				function checkInputString($value, $minLength=INPUT_MIN_LENGTH, $maxLength=INPUT_MAX_LENGTH, $checkEmptyString=true) {
if(DEBUG_F)		echo "<p class='debugCheckInputString'>üåÄ <b>Line " . __LINE__ . "</b>: Aufruf " . __FUNCTION__ . "('$value' [$minLength | $maxLength]) <i>(" . basename(__FILE__) . ")</i></p>\n";	
					
					// Optional (wenn $checkEmptyString=true):
					// Pr√ºfen auf Leerstring
					if( $checkEmptyString === true AND $errorMessage = checkMandatory($value) ) {
						// Fehlerfall
						return $errorMessage;
					
					// Pr√ºfen auf Mindestl√§nge
					} elseif( mb_strlen($value) < $minLength  ) {
						// Fehlerfall
						return "Muss mindestens $minLength Zeichen lang sein!";
						
					// Pr√ºfen auf Maximall√§nge	
					} elseif( mb_strlen($value) > $maxLength ) {
						// Fehlerfall
						return "Darf maximal $maxLength Zeichen lang sein!";
						
					} else {
						// Erfolgsfall
						return NULL;
					}
				}


#**************************************************************************************#

				
				/**
				*
				*	Pr√ºft einen √ºbergebenen String auf Leerstring und eine valide Email-Adresse
				*	Generiert Fehlermeldung bei Leerstring oder ung√ºltiger Email-Adresse
				*
				*	@param	String	$value		Der √ºbergebene String
				*
				*	@return	String|NULL				Fehlermeldung | ansonsten NULL
				*
				*/
				function checkEmail($value) {
if(DEBUG_F)		echo "<p class='debugCheckEmail'>üåÄ <b>Line " . __LINE__ . "</b>: Aufruf " . __FUNCTION__ . "('$value') <i>(" . basename(__FILE__) . ")</i></p>\n";	
					
					// Pr√ºfen auf Leerstring
					if( $errorMessage = checkMandatory($value) ) {
						// Fehlerfall
						return $errorMessage;
					
					// Pr√ºfen, auf Validit√§t
					} elseif( filter_var( $value, FILTER_VALIDATE_EMAIL ) === false ) {
						// Fehlerfall
						return 'Dies ist keine g√ºltige Email-Adresse!';
						
					} else {
						// Erfolgsfall
						return NULL;
					}
				}


#**************************************************************************************#

				
				/**
				*
				*	Validiert ein auf den Server geladenes Bild, generiert einen unique Dateinamen
				*	sowie eine sichere Dateiendung und verschiebt es in ein anzugebendes Zielverzeichnis.
				*	Validiert werden der aus dem Dateiheader ausgelesene MIME-Type, die aus dem Dateiheader
				*	ausgelesene Bildgr√∂√üe und die ermittelte Dateigr√∂√üe. Der Dateiheader wird au√üerdem auf
				*	Plausibilit√§t gepr√ºft.
				*
				*	@param	String	$fileTemp														Der tempor√§re Pfad zum hochgeladenen Bild im Quarant√§neverzeichnis
				*	@param	Integer	$imageMaxWidth=IMAGE_MAX_WIDTH							Die maximal erlaubte Bildbreite in Pixeln
				*	@param	Integer	$imageMaxHeight=IMAGE_MAX_HEIGHT							Die maximal erlaubte Bildh√∂he in Pixeln
				*	@param	Integer	$imageMaxSize=IMAGE_MAX_SIZE								Die maximal erlaubte Dateigr√∂√üe in Bytes
				*	@param	String	$imageUploadPath=IMAGE_UPLOAD_PATH						Das Zielverzeichnis
				*	@param	Array		$imageAllowedMimeTypes=IMAGE_ALLOWED_MIME_TYPES		Whitelist der zul√§ssigen MIME-Types mit den zugeh√∂rigen Dateiendungen
				*	@param	Integer	$imageMinSize=IMAGE_MIN_SIZE								Die minimal erlaubte Dateigr√∂√üe in Bytes
				*
				*	@return	Array		{'imagePath'=>String|NULL, 								Bei Erfolg der Speicherpfad zur Datei im Zielverzeichnis | bei Fehler NULL
				*							 'imageError'=>String|NULL}								Bei Erfolg NULL | Bei Fehler Fehlermeldung
				*
				*/
				function imageUpload( 	$fileTemp,
												$imageMaxWidth 			= IMAGE_MAX_WIDTH,
												$imageMaxHeight 			= IMAGE_MAX_HEIGHT,
												$imageMaxSize 				= IMAGE_MAX_SIZE,
												$imageUploadPath 			= IMAGE_UPLOAD_PATH,
												$imageAllowedMimeTypes 	= IMAGE_ALLOWED_MIME_TYPES,
												$imageMinSize 				= IMAGE_MIN_SIZE
											) {
if(DEBUG_F)		echo "<p class='debugImageUpload'>üåÄ <b>Line " . __LINE__ . "</b>: Aufruf " . __FUNCTION__ . "('$fileTemp') <i>(" . basename(__FILE__) . ")</i></p>\n";	
					
					
					#***************************************************************************#
					#********** GATHER INFORMATION FOR IMAGE FILE VIA THE FILE HEADER **********#
					#***************************************************************************#
					
					/*
						Die Funktion getimagesize() liest den Dateiheader einern Bilddatei aus und 
						liefert bei g√ºltigem MIME Type ('image/...') ein gemischtes Array zur√ºck:
						
						[0] 				Bildbreite in PX 
						[1] 				Bildh√∂he in PX 
						[3] 				Einen f√ºr das HTML <img>-Tag vorbereiteten String (width="480" height="532") 
						['bits']			Anzahl der Bits pro Kanal 
						['channels']	Anzahl der Farbkan√§le (somit auch das Farbmodell: RGB=3, CMYK=4) 
						['mime'] 		MIME Type
						
						Bei ung√ºltigem MIME Type (also nicht 'image/...') liefert getimagesize() NULL zur√ºck
					*/
					$imageDataArray = getimagesize($fileTemp);
/*					
if(DEBUG_F)		echo "<pre class='debugImageUpload value'>Line <b>" . __LINE__ . "</b> <i>(" . basename(__FILE__) . ")</i>:<br>\n";					
if(DEBUG_F)		print_r($imageDataArray);					
if(DEBUG_F)		echo "</pre>";					
*/					
					
					#********** CHECK FOR VALID MIME TYPE **********#
					if( $imageDataArray === false ) {
						// Fehlerfall (mime type is not valid)
						/*
							Bildwerte auf NULL setzen, damit die Variablen f√ºr die nachfolgenden
							Validierungen exitieren und zu korrekten Fehlermeldungen f√ºhren
						*/
						$imageWidth = $imageHeight = $imageMimeType = $fileSize = NULL;
						
					} elseif( is_array($imageDataArray) ) {						
						// Erfolgsfall (mime type is valid)
						
						$imageWidth 	= $imageDataArray[0];			// image width in px via getimagesize()
						$imageHeight 	= $imageDataArray[1];			// image height in px via getimagesize()
						$imageMimeType = $imageDataArray['mime'];		// image height in px via getimagesize()
						$fileSize		= filesize($fileTemp);			// file size in bytes via filesize()					
					}
if(DEBUG_F)		echo "<p class='debugImageUpload value'><b>Line " . __LINE__ . "</b>: \$imageWidth: $imageWidth px<i>(" . basename(__FILE__) . ")</i></p>\n";
if(DEBUG_F)		echo "<p class='debugImageUpload value'><b>Line " . __LINE__ . "</b>: \$imageHeight: $imageHeight px<i>(" . basename(__FILE__) . ")</i></p>\n";
if(DEBUG_F)		echo "<p class='debugImageUpload value'><b>Line " . __LINE__ . "</b>: \$imageMimeType: $imageMimeType <i>(" . basename(__FILE__) . ")</i></p>\n";
if(DEBUG_F)		echo "<p class='debugImageUpload value'><b>Line " . __LINE__ . "</b>: \$fileSize: " . round($fileSize/1024, 2) . " kB<i>(" . basename(__FILE__) . ")</i></p>\n";
					
					#**********************************************************************#
					
					
					#**************************************#
					#********** IMAGE VALIDATION **********#
					#**************************************#
					
					// Whitelist mit erlaubten MIME TYPES und Dateiendungen
					// $imageAllowedMimeTypes = array('image/jpg'=>'.jpg', 'image/jpeg'=>'.jpg', 'image/png'=>'.png', 'image/gif'=>'.gif');
					
					/*
						Da Schadcode h√§ufig nur wenige Zeilen lang ist, ist eine zu kleine
						Dateigr√∂√üe per se verd√§chtig. Brauchbare Bilddateien beginnen bei
						etwa 1kB Dateigr√∂√üe (ca. 80-100Bytes f√ºr Icons).
						Au√üerdem wird gleich gepr√ºft, ob ein Hacker wom√∂glich den MIME Type
						im Dateiheader manipuliert hat. Bilder verf√ºgen immer √ºber eine Gr√∂√üenangabe
						in Pixeln, die vom Hacker manchmal vergessen wird, ebenfalls in den manipulierten
						Header einzuf√ºgen. Wenn die Bildgr√∂√üenangaben keinen Wert besitzen, muss von einem
						manipulierten Dateiheader ausgegangen werden.
						
						Sollte getimagesize() aufgrund eines falschen MIME Types false zur√ºckgeliefert haben,
						sind alle Variablenwerte NULL und f√ºhren hier automatisch zum Fehlerfall
					*/
					#********** CHECK IF FILE HEADER IS PLAUSIBLE **********#
					if( $fileSize < $imageMinSize OR $imageWidth === NULL OR $imageHeight === NULL ) {
						// Fehlerfall 1: Potentiell verd√§chtiger Dateiheader
						$errorMessage = 'Potentielles Schadskript entdeckt!';
					
					
					#********** CHECK FOR VALID IMAGE/MIME TYPE **********#
					/*
						Der optionale 3. Parameter der in_array()-Funktion erzwingt einen strikten Wertevergleich, 
						damit '0' und '' nicht als gleich interpretiert werden.
						Er sollte aus Sicherheitsgr√ºnden immer gesetzt werden.
						in_array() liefert true zur√ºck, wenn die Needle im Array gefunden wurde, ansonsten false
					*/
					} elseif( in_array($imageMimeType, array_keys($imageAllowedMimeTypes), true) === false ) {
						// Fehlerfall 2: Unerlaubter MIME TYPE
						$errorMessage = 'Dies ist kein erlaubter Bildtyp!';
						
					
					#********** VALIDATE IMAGE WIDTH **********#
					} elseif( $imageWidth > $imageMaxWidth ) {
						// Fehlerfall 3: Bildbreite zu gro√ü
						$errorMessage = 'Die Bildbreite darf maximal ' . $imageMaxWidth . 'px betragen!';
						
						
					#********** VALIDATE IMAGE HEIGHT **********#
					} elseif( $imageHeight > $imageMaxHeight ) {
						// Fehlerfall 4: Bildh√∂he zu gro√ü
						$errorMessage = 'Die Bildh√∂he darf maximal ' . $imageMaxHeight . 'px betragen!';
						
					
					#********** VALIDATE FILE SIZE **********#
					} elseif( $fileSize > $imageMaxSize ) {
						// Fehlerfall 5: Datei zu gro√ü
						$errorMessage = 'Die Dateigr√∂√üe darf maximal ' . $imageMaxSize/1024 . 'kB betragen!';
						
						
					#********** ALL CHECKS ARE PASSED **********#
					} else {
						// Erfolgsfall
						$errorMessage = NULL;
					}
					
					
					#**********************************************************************#
					
					
					#********** FINAL IMAGE VALIDATION **********#
					if( $errorMessage !== NULL ) {
						// Fehlerfall
if(DEBUG_F)			echo "<p class='debugImageUpload err'><b>Line " . __LINE__ . "</b>: $errorMessage <i>(" . basename(__FILE__) . ")</i></p>\n";				
						// Initialize $fileTarget
						$fileTarget = NULL;
						
					} else {
						// Erfolgsfall
if(DEBUG_F)			echo "<p class='debugImageUpload ok'><b>Line " . __LINE__ . "</b>: Die Bildvalidierung ergab keine Probleme. <i>(" . basename(__FILE__) . ")</i></p>\n";				
						
						
						#**********************************************************#
						#********** PREPARE IMAGE FOR PERSISTANT STORING **********#
						#**********************************************************#
						
						/*
							Da der Dateiname selbst Schadcode in Form von ung√ºltigen oder versteckten Zeichen,
							doppelte Dateiendungen (dateiname.exe.jpg) etc. beinhalten kann, dar√ºberhinaus ohnehin 
							s√§mtliche, nicht in einer URL erlaubten Sonderzeichen und Umlaute entfernt werden m√ºssten 
							sollte der Dateiname aus Sicherheitsgr√ºnden komplett neu generiert werden.
							
							Hierbei muss au√üerdem bedacht werden, dass die jeweils generierten Dateinamen unique
							sein m√ºssen, damit die Dateien sich bei gleichem Dateinamen nicht gegenseitig √ºberschreiben.
						*/
						
						#********** GENERATE UNIQUE FILE NAME **********#
						/*
							- 	mt_rand() stellt die verbesserte Version der Funktion rand() dar und generiert 
								Zufallszahlen mit einer gleichm√§√üigeren Verteilung √ºber das Wertesprektrum. Ohne zus√§tzliche
								Parameter werden Zahlenwerte zwischen 0 und dem h√∂chstm√∂glichem von mt_rand() verarbeitbaren 
								Zahlenwert erzeugt.							
							- 	str_shuffle mischt die Zeichen eines √ºbergebenen Strings zuf√§llig durcheinander.
							- 	microtime() liefert einen Timestamp mit Millionstel Sekunden zur√ºck (z.B. '0.57914300 163433596'),
								aus dem f√ºr eine URL-konforme Darstellung der Dezimaltrenner und das Leerzeichen entfernt werden.
						*/
						$fileName = mt_rand() . '_' . str_shuffle('abcdefghijklmnopqrstuvwxyz_-0123456789') . '_' . str_replace( array('.', ' '), '', microtime());
						
						
						#********** GENERATE FILE EXTENSION **********#
						/*
							Aus Sicherheitsgr√ºnden wird nicht die urspr√ºngliche Dateinamenerweiterung aus dem
							Dateinamen verwendet, sondern eine vorgenerierte Dateiendung aus dem Array der 
							erlaubten MIME Types.
							Die Dateiendung wird anhand des ausgelesenen MIME Types [key] ausgew√§hlt.
						*/
						$fileExtension = $imageAllowedMimeTypes[$imageMimeType];
						
						
						#********** GENERATE FILE TARGET **********#
						// Endg√ºltigen Speicherpfad auf dem Server generieren
						// DestinationPath/FileName + FileExtension
						$fileTarget = $imageUploadPath . $fileName . $fileExtension;
// if(DEBUG_F)			echo "<p class='debugImageUpload value'><b>Line " . __LINE__ . "</b>: \$fileTarget: $fileTarget <i>(" . basename(__FILE__) . ")</i></p>\n";
						
						
						#**********************************************************************#
						
						
						#*****************************************************#
						#********** MOVE IMAGE TO FINAL DESTINATION **********#
						#*****************************************************#
						
						/*
							move_uploaded_file() verschiebt eine hochgeladene Datei an einen 
							neuen Speicherort und benennt die Datei um
						*/
						if( move_uploaded_file($fileTemp, $fileTarget) === false ) {
							// Fehlerfall
if(DEBUG_F)				echo "<p class='debugImageUpload err'><b>Line " . __LINE__ . "</b>: FEHLER beim Verschieben der Datei nach <i>'$fileTarget'</i>! <i>(" . basename(__FILE__) . ")</i></p>\n";				
							$errorMessage = 'Beim Hochladen des Bildes ist ein Fehler aufgetreten! Bitte versuchen Sie es sp√§ter noch einmal.';
							// L√∂sche FileTarget
							$fileTarget = NULL;
							
						} else {
							// Erfolgsfall
if(DEBUG_F)				echo "<p class='debugImageUpload ok'><b>Line " . __LINE__ . "</b>: Datei erfolgreich nach <i>'$fileTarget'</i> verschoben. <i>(" . basename(__FILE__) . ")</i></p>\n";				
							
						} // MOVE IMAGE TO FINAL DESTINATION END
						
						
						#**********************************************************************#
						
						
					} // FINAL IMAGE VALIDATION END
					
					
					#**********************************************************************#
					
					
					#********** RETURN ARRAY CONTAINING EITHER IMAGE PATH OR ERROR MESSAGE **********#
					return array( 'imagePath' => $fileTarget, 'imageError' => $errorMessage );
					
				}


#**************************************************************************************#
?>























